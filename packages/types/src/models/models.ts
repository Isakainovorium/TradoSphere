/**
 * Domain Models
 * Business logic type definitions
 */

// =====================================================
// USER MODELS
// =====================================================

export interface User {
  id: string;
  email: string;
  username: string;
  fullName: string | null;
  avatarUrl: string | null;
  bio: string | null;
  website: string | null;
  twitterHandle: string | null;
  tier: SubscriptionTier;
  isCreator: boolean;
  createdAt: Date;
  updatedAt: Date;
}

export type SubscriptionTier = 'free' | 'tsgrow' | 'elite' | 'gladiator';

export interface UserStats {
  followersCount: number;
  followingCount: number;
  signalsCount: number;
  totalPnl: number;
  winRate: number;
  currentStreak: number;
  bestStreak: number;
}

// =====================================================
// SIGNAL MODELS
// =====================================================

export interface Signal {
  id: string;
  userId: string;
  symbol: string;
  direction: TradeDirection;
  entryPrice: number;
  stopLoss: number | null;
  takeProfit: number | null;
  positionSize: number | null;
  timeframe: string | null;
  description: string | null;
  imageUrl: string | null;
  status: SignalStatus;
  exitPrice: number | null;
  pnl: number | null;
  likesCount: number;
  commentsCount: number;
  createdAt: Date;
  updatedAt: Date;
}

export type TradeDirection = 'long' | 'short';
export type SignalStatus = 'active' | 'closed' | 'cancelled';

export interface SignalWithUser extends Signal {
  user: {
    username: string;
    avatarUrl: string | null;
    tier: SubscriptionTier;
    currentRank: string;
  };
}

// =====================================================
// COMPETITION MODELS
// =====================================================

export interface Competition {
  id: string;
  competitionType: CompetitionType;
  isRanked: boolean;
  isCustom: boolean;
  creatorId: string | null;
  name: string;
  description: string | null;
  durationHours: number;
  startTime: Date | null;
  endTime: Date | null;
  entryFee: number;
  maxParticipants: number;
  currentParticipants: number;
  allowedSymbols: string[] | null;
  minRank: string | null;
  maxRank: string | null;
  prizePool: number;
  prizeDistribution: Record<number, number>;
  status: CompetitionStatus;
  avgXp: number | null;
  xpRangeMin: number | null;
  xpRangeMax: number | null;
  autoGenerated: boolean;
  createdAt: Date;
  updatedAt: Date;
}

export type CompetitionType =
  | '1v1'
  | 'team'
  | 'battle_royal'
  | 'mentor_clan'
  | 'mentor_vs_mentor'
  | 'ranked_match';

export type CompetitionStatus = 'pending' | 'active' | 'completed' | 'cancelled';

export interface CompetitionParticipant {
  id: string;
  competitionId: string;
  userId: string;
  teamId: string | null;
  joinedAt: Date;
  entryFeePaid: number;
  totalTrades: number;
  winningTrades: number;
  totalPnl: number;
  currentRank: number | null;
  finalRank: number | null;
  prizeAmount: number;
  prizePaid: boolean;
  xpBefore: number | null;
  xpAfter: number | null;
  xpGained: number | null;
}

// =====================================================
// RANKING MODELS
// =====================================================

export interface UserRanking {
  id: string;
  userId: string;
  currentXp: number;
  currentRank: RankTier;
  rankTier: number;
  totalCompetitions: number;
  wins: number;
  losses: number;
  winRate: number;
  currentWinStreak: number;
  currentLossStreak: number;
  bestWinStreak: number;
  peakXp: number;
  peakRank: RankTier;
  peakRankAchievedAt: Date | null;
  lastCompetitionAt: Date | null;
  daysActiveThisWeek: number;
  lastActiveDate: Date | null;
  seasonId: number;
  seasonXp: number;
  seasonWins: number;
  createdAt: Date;
  updatedAt: Date;
}

export type RankTier =
  | 'Bronze III'
  | 'Bronze II'
  | 'Bronze I'
  | 'Silver III'
  | 'Silver II'
  | 'Silver I'
  | 'Gold III'
  | 'Gold II'
  | 'Gold I'
  | 'Platinum III'
  | 'Platinum II'
  | 'Platinum I'
  | 'Diamond III'
  | 'Diamond II'
  | 'Diamond I'
  | 'Champion';

export interface XpTransaction {
  id: string;
  userId: string;
  competitionId: string | null;
  xpChange: number;
  xpBefore: number;
  xpAfter: number;
  reason: XpTransactionReason;
  reasonDetails: Record<string, any>;
  rankBefore: RankTier | null;
  rankAfter: RankTier | null;
  rankUp: boolean;
  rankDown: boolean;
  createdAt: Date;
}

export type XpTransactionReason =
  | 'competition_win'
  | 'competition_loss'
  | 'streak_bonus'
  | 'daily_activity'
  | 'rank_decay'
  | 'season_reset'
  | 'manual_adjustment';

// =====================================================
// BROKER MODELS
// =====================================================

export interface BrokerConnection {
  id: string;
  userId: string;
  brokerName: BrokerName;
  brokerAccountId: string;
  connectionStatus: BrokerConnectionStatus;
  lastSyncAt: Date | null;
  errorMessage: string | null;
  createdAt: Date;
  updatedAt: Date;
}

export type BrokerName =
  | 'tradovate'
  | 'binance'
  | 'ninjatrader'
  | 'rhythmic'
  | 'quantower'
  | 'mt4'
  | 'mt5'
  | 'tradelocker'
  | 'mexc'
  | 'bybit'
  | 'projectx';

export type BrokerConnectionStatus = 'connected' | 'disconnected' | 'error';

export interface BrokerTrade {
  id: string;
  userId: string;
  brokerConnectionId: string;
  brokerTradeId: string;
  symbol: string;
  direction: TradeDirection;
  quantity: number;
  entryPrice: number;
  exitPrice: number | null;
  stopLoss: number | null;
  takeProfit: number | null;
  pnl: number | null;
  commission: number | null;
  status: TradeStatus;
  openedAt: Date;
  closedAt: Date | null;
  createdAt: Date;
  updatedAt: Date;
}

export type TradeStatus = 'open' | 'closed';

export interface BrokerAccount {
  balance: number;
  equity: number;
  margin: number;
  freeMargin: number;
  marginLevel: number;
  openPositions: number;
  currency: string;
}

// =====================================================
// STREAMING MODELS
// =====================================================

export interface Stream {
  id: string;
  userId: string;
  title: string;
  description: string | null;
  category: string | null;
  streamKey: string;
  agoraChannelName: string;
  status: StreamStatus;
  viewerCount: number;
  startedAt: Date | null;
  endedAt: Date | null;
  createdAt: Date;
  updatedAt: Date;
}

export type StreamStatus = 'live' | 'offline' | 'ended';

export interface StreamViewer {
  userId: string;
  username: string;
  avatarUrl: string | null;
  joinedAt: Date;
}

// =====================================================
// SUBSCRIPTION MODELS
// =====================================================

export interface Subscription {
  id: string;
  userId: string;
  tier: SubscriptionTier;
  status: SubscriptionStatus;
  billingCycle: 'monthly' | 'yearly';
  currentPeriodStart: Date;
  currentPeriodEnd: Date;
  cancelAtPeriodEnd: boolean;
  stripeCustomerId: string;
  stripeSubscriptionId: string;
  createdAt: Date;
  updatedAt: Date;
}

export type SubscriptionStatus = 'active' | 'cancelled' | 'past_due' | 'trialing';

export interface CreatorSubscription {
  id: string;
  subscriberId: string;
  creatorId: string;
  tier: string;
  price: number;
  status: SubscriptionStatus;
  currentPeriodEnd: Date;
  createdAt: Date;
}

// =====================================================
// NOTIFICATION MODELS
// =====================================================

export interface Notification {
  id: string;
  userId: string;
  type: NotificationType;
  title: string;
  message: string;
  data: Record<string, any>;
  read: boolean;
  createdAt: Date;
}

export type NotificationType =
  | 'match_found'
  | 'competition_started'
  | 'competition_ended'
  | 'rank_up'
  | 'rank_down'
  | 'new_follower'
  | 'signal_liked'
  | 'signal_commented'
  | 'subscription_renewed'
  | 'subscription_cancelled'
  | 'broker_sync_failed';

// =====================================================
// COMMENT & LIKE MODELS
// =====================================================

export interface Comment {
  id: string;
  userId: string;
  signalId: string;
  content: string;
  likesCount: number;
  createdAt: Date;
  updatedAt: Date;
}

export interface Like {
  id: string;
  userId: string;
  signalId: string;
  createdAt: Date;
}

export interface Follow {
  id: string;
  followerId: string;
  followingId: string;
  createdAt: Date;
}

// =====================================================
// LEARNING HUB MODELS
// =====================================================

export interface Course {
  id: string;
  title: string;
  description: string;
  category: string;
  difficulty: 'beginner' | 'intermediate' | 'advanced';
  duration: number; // minutes
  lessonsCount: number;
  enrolledCount: number;
  thumbnailUrl: string | null;
  createdAt: Date;
  updatedAt: Date;
}

export interface Lesson {
  id: string;
  courseId: string;
  title: string;
  content: string;
  videoUrl: string | null;
  order: number;
  duration: number; // minutes
  createdAt: Date;
  updatedAt: Date;
}

export interface CourseProgress {
  id: string;
  userId: string;
  courseId: string;
  completedLessons: string[];
  progress: number; // percentage
  startedAt: Date;
  completedAt: Date | null;
  lastAccessedAt: Date;
}

// =====================================================
// MENTOR SYSTEM MODELS
// =====================================================

export interface MentorProfile {
  userId: string;
  tradingStyle: string;
  specialties: string[];
  yearsExperience: number;
  winRate: number;
  followersCount: number;
  subscribersCount: number;
  monthlyPrice: number;
  isAcceptingStudents: boolean;
}

export interface MentorMatch {
  id: string;
  userId: string;
  mentorId: string;
  compatibilityScore: number;
  matchQuality: 'excellent' | 'good' | 'moderate' | 'low';
  matchFactors: Record<string, number>;
  matchExplanation: string;
  userViewed: boolean;
  userSubscribed: boolean;
  calculatedAt: Date;
}

// =====================================================
// TRADING JOURNAL MODELS
// =====================================================

export interface JournalEntry {
  id: string;
  userId: string;
  tradeId: string | null; // Link to broker trade if auto-generated
  symbol: string;
  direction: TradeDirection;
  entryPrice: number;
  exitPrice: number;
  quantity: number;
  pnl: number;
  commission: number;
  notes: string | null;
  tags: string[];
  emotions: string[];
  mistakes: string[];
  lessons: string[];
  screenshots: string[];
  tradedAt: Date;
  createdAt: Date;
  updatedAt: Date;
}
